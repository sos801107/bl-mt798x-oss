name: 798x-UBOOT

on:
  #自动编译：每周日早上4点
  schedule:
  - cron: 0 20 * * 0
  #手动编译
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  WRT_TARGET: MTK-798x
  WRT_REPO: https://github.com/sos801107/bl-mt798x-oss.git
  WRT_BRANCH: fit-example

permissions: write-all

jobs:
  cleanup:
    runs-on: ubuntu-22.04
    steps:
      - name: Delete old Releases and Workflows
        uses: ophub/delete-releases-workflows@main
        with:
          gh_token: ${{secrets.GITHUB_TOKEN}}
          delete_releases: true
          releases_keep_latest: 0
          delete_tags: true
          delete_workflows: true
          workflows_keep_day: 0

  build:
    runs-on: ubuntu-latest
    needs: cleanup
    strategy:
      fail-fast: false
      #max-parallel: 4
      matrix:
        WRT_ATF: [atf-20240117-bacca82a8]
        WRT_MTK: [uboot-mtk-20220606]

    steps:
      - name: Checkout Projects
        uses: actions/checkout@main

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo docker image prune --all --force
          sudo -E apt-get -qq update
          sudo -E apt-get install -y dos2unix bison build-essential device-tree-compiler flex gcc-aarch64-linux-gnu libssl-dev qemu-user-static
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo -E systemctl daemon-reload
          sudo timedatectl set-timezone "Asia/Shanghai"

          sudo mkdir -p /mnt/build_wrt
          sudo chown $USER:$USER /mnt/build_wrt
          sudo ln -s /mnt/build_wrt $GITHUB_WORKSPACE/wrt
          
      - name: Initialization Values
        run: |
          echo "WRT_AUTHOR=$(echo $WRT_REPO | cut -d '/' -f 4)" >> $GITHUB_ENV
          echo "WRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d")" >> $GITHUB_ENV
          echo "WRT_VER=$(echo ${{matrix.WRT_ATF}} | grep -oP 'atf-\d+')_$(echo ${{matrix.WRT_MTK}} | grep -oP 'mtk-\d+')" >> $GITHUB_ENV

      - name: Clone Code
        run: |
          git clone --depth=1 --single-branch --branch $WRT_BRANCH $WRT_REPO ./wrt/

      - name: Compile Prepare
        run: |
          sed -i "5s/UBOOT_DIR=.*/UBOOT_DIR=${{matrix.WRT_MTK}}/" ./wrt/build.sh
          sed -i "7s/ATF_DIR=.*/ATF_DIR=${{matrix.WRT_ATF}}/" ./wrt/build.sh

          # 收集 uboot 配置并生成 Uboots.txt
          declare -A lines_map
          while IFS= read -r f; do
            [[ $(basename "$f") =~ ^(mt798[16])_(.*)_defconfig$ ]] || continue
            soc="${BASH_REMATCH[1]}"
            rest="${BASH_REMATCH[2]}"
            board="${rest%_multi_layout}"
            
          # 仅处理指定设备
          if [[ "$board" == "zyxel_ex5700" ]]; then
              continue
          fi
            key="$soc:$board"
            if [[ $rest == *_multi_layout ]]; then
              lines_map["$key"]="SOC=$soc BOARD=$board MULTI_LAYOUT=1 ./build.sh"
            elif [[ -z "${lines_map[$key]}" ]]; then
              lines_map["$key"]="SOC=$soc BOARD=$board ./build.sh"
            fi
          done < <(find ./wrt/uboot-mtk-*/configs -type f -name 'mt798*defconfig' | grep -iE 'mt798[16]_' | grep -ivE 'rfb|fpga')

          # 输出 Uboots.txt
          printf "%s\n" "${lines_map[@]}" | sort > ./Uboots.txt

          # 生成 TYPE_7981 和 TYPE_7986（按 SOC 分类，BOARD 大写 + 排序）
          for soc in 7981 7986; do
            boards=$(awk -v s="SOC=mt$soc" '$0 ~ s {
              for (i=1; i<=NF; i++) if ($i ~ /^BOARD=/) {
                split($i, a, "="); print toupper(a[2]);
              }
            }' ./Uboots.txt | sort -u | xargs)
            eval "TYPE_$soc=\"$boards\""
          done

          # 检查权限
          mv -f Uboots.txt Uboots.sh
          find ./ -maxdepth 3 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

          echo "WRT_TYPE_7981=$TYPE_7981" >> $GITHUB_ENV
          echo "WRT_TYPE_7986=$TYPE_7986" >> $GITHUB_ENV

      - name: Compile Firmware
        run: |
          cd ./wrt/

          $GITHUB_WORKSPACE/Uboots.sh

      - name: Machine Information
        run: |
          cd ./wrt/

          echo "======================="
          lscpu | grep -E "name|Core|Thread"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1
          echo "======================="

      - name: Package Firmware
        run: |
          cd ./wrt/ && mkdir ./upload/

          for FILE in $(find ./output/ -type f -iname "*.*") ; do
            EXT=$(basename $FILE | cut -d '.' -f 2-)
            NAME=$(basename $FILE | cut -d '.' -f 1)
            NEW_FILE="$NAME"_"$WRT_VER"_"$WRT_DATE"."$EXT"
            mv -f $FILE ./upload/$NEW_FILE
          done

          zip -r ./upload/"$WRT_AUTHOR"_"$WRT_VER"_"$WRT_DATE".zip ./upload/*.*

      - name: Release Firmware
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{env.WRT_AUTHOR}}_${{env.WRT_VER}}_${{env.WRT_DATE}}
          files: ./wrt/upload/*.*
          body: |
            根据 1715173329 的源码编译：| bl-mt798x-oss |编译的 mt798x-uboot，并对其进行了汉化
            这是个平台固件包，内含多个设备！
            请注意选择你需要的设备固件！
            不要问，刷就完事了！

            平台：${{env.WRT_TARGET}}
            源码：${{env.WRT_REPO}}
            分支：${{env.WRT_BRANCH}}

            ATF版本：${{matrix.WRT_ATF}}
            MTK版本：${{matrix.WRT_MTK}}

            7981设备：${{env.WRT_TYPE_7981}}
            7986设备：${{env.WRT_TYPE_7986}}
